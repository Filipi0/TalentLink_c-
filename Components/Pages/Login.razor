@page "/login"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="logo-container">
                <div class="logo-icon">
                    <svg width="40" height="40" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M20 6L9 17L4 12" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h1 class="logo-text">TalentLink</h1>
            </div>
            <p class="login-subtitle">Conectando talentos às melhores oportunidades</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="login-form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email" class="form-label">Email</label>
                <InputText @bind-Value="loginModel.Email" 
                          id="email" 
                          class="form-control" 
                          placeholder="Digite seu email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Senha</label>
                <InputText @bind-Value="loginModel.Password" 
                          id="password" 
                          type="password" 
                          class="form-control" 
                          placeholder="Digite sua senha" />
                <ValidationMessage For="@(() => loginModel.Password)" class="validation-message" />
            </div>

            <div class="form-group form-check">
                <InputCheckbox @bind-Value="loginModel.RememberMe" 
                              id="rememberMe" 
                              class="form-check-input" />
                <label for="rememberMe" class="form-check-label">Lembrar de mim</label>
            </div>

            <button type="submit" class="btn btn-login" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <text>Entrando...</text>
                }
                else
                {
                    <span>Entrar</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @errorMessage
                </div>
            }
        </EditForm>

        <div class="login-footer">
            <a href="/forgot-password" class="forgot-password-link">Esqueceu sua senha?</a>
            <div class="signup-text">
                Não tem uma conta? <a href="/register" class="signup-link">Cadastre-se</a>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            // Aqui você integrará com sua API de autenticação
            await Task.Delay(1000); // Simulando chamada da API
            
            // Exemplo de validação simples (remova quando integrar com a API)
            if (loginModel.Email == "admin@talentlink.com" && loginModel.Password == "123456")
            {
                // Login bem-sucedido - redirecionar para dashboard
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Email ou senha inválidos.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Erro ao fazer login. Tente novamente.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "O email é obrigatório")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "A senha é obrigatória")]
        [MinLength(6, ErrorMessage = "A senha deve ter pelo menos 6 caracteres")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
