@page "/dashboard"
@layout CleanLayout
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject OpportunityService OpportunityService
@inject ILogger<Dashboard> Logger
@rendermode InteractiveServer

<PageTitle>Dashboard - TalentLink</PageTitle>

<div class="dashboard-container">
    <div class="dashboard-header">
        <div class="welcome-section">
            <h1 class="dashboard-title">Bem-vindo ao TalentLink!</h1>
            <p class="dashboard-subtitle">Aqui voc√™ encontrar√° as melhores oportunidades de trabalho</p>
        </div>
        <div class="user-actions">
            <span class="user-welcome">Ol√°, @userName! üëã</span>
            <button class="btn btn-outline-danger ms-3" @onclick="Logout">
                <svg width="16" height="16" fill="currentColor" class="bi bi-box-arrow-right me-1" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
                </svg>
                Sair
            </button>
        </div>
    </div>

    <div class="dashboard-content">
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" class="bi bi-briefcase" viewBox="0 0 16 16">
                        <path d="M6.5 1A1.5 1.5 0 0 0 5 2.5V3H1.5A1.5 1.5 0 0 0 0 4.5v8A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-8A1.5 1.5 0 0 0 14.5 3H11v-.5A1.5 1.5 0 0 0 9.5 1h-3zm0 1h3a.5.5 0 0 1 .5.5V3H6v-.5a.5.5 0 0 1 .5-.5z"/>
                        <path d="M1 4.5A.5.5 0 0 1 1.5 4h13a.5.5 0 0 1 .5.5v1H1v-1z"/>
                    </svg>
                </div>
                <div class="stat-info">
                    <h3>Vagas Dispon√≠veis</h3>
                    <p class="stat-number">@opportunities.Count</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" class="bi bi-person-check" viewBox="0 0 16 16">
                        <path d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7zm1.679-4.493-1.335 2.226a.75.75 0 0 1-1.174.144l-.774-.773a.5.5 0 0 1 .708-.708l.547.548 1.17-1.951a.5.5 0 1 1 .858.514zM11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                        <path d="M2 13c0 1 1 1 1 1h5.256A4.493 4.493 0 0 1 8 12.5a4.49 4.49 0 0 1 1.544-3.393C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4z"/>
                    </svg>
                </div>
                <div class="stat-info">
                    <h3>Candidaturas</h3>
                    <p class="stat-number">0</p>
                </div>
            </div>

            <div class="stat-card">
                <div class="stat-icon">
                    <svg width="24" height="24" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                        <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"/>
                    </svg>
                </div>
                <div class="stat-info">
                    <h3>Favoritas</h3>
                    <p class="stat-number">0</p>
                </div>
            </div>
        </div>

        <!-- Filtros de Busca -->
        <div class="search-section">
            <h3>üîç Buscar Oportunidades</h3>
            <div class="row g-3 mt-2">
                <div class="col-md-4">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="searchQuery" placeholder="Ex: desenvolvedor" 
                               @bind="searchQuery" @onkeypress="OnSearchKeyPress">
                        <label for="searchQuery">Palavra-chave</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="searchLocation" placeholder="Ex: S√£o Paulo" 
                               @bind="searchLocation" @onkeypress="OnSearchKeyPress">
                        <label for="searchLocation">Localiza√ß√£o</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="searchSalary" placeholder="Ex: 5000-8000" 
                               @bind="searchSalary" @onkeypress="OnSearchKeyPress">
                        <label for="searchSalary">Faixa Salarial</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <button class="btn btn-primary h-100 w-100" @onclick="SearchOpportunities" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Buscar
                    </button>
                </div>
            </div>
            
            @if (hasFilters)
            {
                <div class="mt-3">
                    <button class="btn btn-outline-secondary btn-sm" @onclick="ClearFilters">
                        ‚ùå Limpar Filtros
                    </button>
                </div>
            }
        </div>

        <!-- Status/Loading -->
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @(isError ? "alert-danger" : "alert-info") mt-3" role="alert">
                @statusMessage
            </div>
        }

        <!-- Lista de Oportunidades -->
        <div class="recent-jobs">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2>
                    @if (hasFilters)
                    {
                        <span>üîç Resultados da Busca (@opportunities.Count)</span>
                    }
                    else
                    {
                        <span>üìã Oportunidades Dispon√≠veis (@opportunities.Count)</span>
                    }
                </h2>
                
                @if (!hasFilters)
                {
                    <button class="btn btn-success" @onclick="LoadAllOpportunities" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        üîÑ Atualizar
                    </button>
                }
            </div>

            <div class="job-list">
                @if (isLoading && opportunities.Count == 0)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;"></div>
                        <p class="text-muted">Carregando oportunidades...</p>
                    </div>
                }
                else if (opportunities.Count == 0 && !isLoading)
                {
                    <div class="empty-state">
                        <div class="text-center py-5">
                            <h4 class="text-muted">ü§∑‚Äç‚ôÇÔ∏è Nenhuma oportunidade encontrada</h4>
                            <p class="text-muted">
                                @if (hasFilters)
                                {
                                    <span>Tente ajustar seus filtros de busca.</span>
                                }
                                else
                                {
                                    <span>N√£o h√° oportunidades dispon√≠veis no momento.</span>
                                }
                            </p>
                        </div>
                    </div>
                }
                else
                {
                    @foreach (var opportunity in opportunities)
                    {
                        <div class="job-card">
                            <div class="job-header">
                                <h3>@opportunity.Title</h3>
                                <span class="company">@(string.IsNullOrEmpty(opportunity.CompanyId) ? "Empresa Parceira" : $"ID: {opportunity.CompanyId.Substring(0, Math.Min(8, opportunity.CompanyId.Length))}")</span>
                            </div>
                            <div class="job-details">
                                <span class="location">üìç @opportunity.Location</span>
                                <span class="salary">üí∞ @opportunity.SalaryRange</span>
                            </div>
                            <div class="job-description">
                                <p>@opportunity.Description</p>
                            </div>
                            @if (!string.IsNullOrEmpty(opportunity.Requirements))
                            {
                                <div class="job-requirements">
                                    <strong>üìã Requisitos:</strong> @opportunity.Requirements
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(opportunity.Benefits))
                            {
                                <div class="job-benefits">
                                    <strong>üéÅ Benef√≠cios:</strong> @opportunity.Benefits
                                </div>
                            }
                            <div class="job-footer">
                                <span class="job-date">üìÖ @opportunity.CreatedAt.ToString("dd/MM/yyyy")</span>
                                <button class="btn btn-primary btn-apply">
                                    Candidatar-se
                                </button>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Opportunity> opportunities = new();
    private string userName = "";
    private string userToken = "";
    
    // Filtros de busca
    private string searchQuery = "";
    private string searchLocation = "";
    private string searchSalary = "";
    
    // Estados da UI
    private bool isLoading = false;
    private string statusMessage = "";
    private bool isError = false;
    private bool hasFilters => !string.IsNullOrEmpty(searchQuery) || !string.IsNullOrEmpty(searchLocation) || !string.IsNullOrEmpty(searchSalary);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserData();
            await LoadAllOpportunities();
        }
    }

    private async Task LoadUserData()
    {
        try
        {
            // Carregar dados do usu√°rio do localStorage
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
            var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "user");

            if (string.IsNullOrEmpty(token) || string.IsNullOrEmpty(userJson))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            userToken = token;
            
            // Parse do JSON do usu√°rio
            var userObj = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(userJson);
            if (userObj != null && userObj.ContainsKey("name"))
            {
                userName = userObj["name"].ToString() ?? "Usu√°rio";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar dados do usu√°rio");
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadAllOpportunities()
    {
        try
        {
            if (string.IsNullOrEmpty(userToken))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            isLoading = true;
            isError = false;
            statusMessage = "Carregando oportunidades...";
            StateHasChanged();

            opportunities = await OpportunityService.GetAllOpportunitiesAsync(userToken);
            
            statusMessage = $"‚úÖ {opportunities.Count} oportunidades carregadas";
            
            // Limpar mensagem ap√≥s 3 segundos
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                statusMessage = "";
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (UnauthorizedAccessException)
        {
            statusMessage = "‚ùå Sess√£o expirada. Fa√ßa login novamente.";
            isError = true;
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar oportunidades");
            statusMessage = $"‚ùå Erro ao carregar oportunidades: {ex.Message}";
            isError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchOpportunities()
    {
        try
        {
            if (string.IsNullOrEmpty(userToken))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            isLoading = true;
            isError = false;
            statusMessage = "Buscando oportunidades...";
            StateHasChanged();

            var searchRequest = new SearchRequest
            {
                Query = string.IsNullOrEmpty(searchQuery) ? null : searchQuery,
                Location = string.IsNullOrEmpty(searchLocation) ? null : searchLocation,
                SalaryRange = string.IsNullOrEmpty(searchSalary) ? null : searchSalary
            };

            opportunities = await OpportunityService.SearchOpportunitiesAsync(userToken, searchRequest);
            
            statusMessage = $"üîç {opportunities.Count} oportunidades encontradas";
            
            // Limpar mensagem ap√≥s 3 segundos
            _ = Task.Run(async () =>
            {
                await Task.Delay(3000);
                statusMessage = "";
                await InvokeAsync(StateHasChanged);
            });
        }
        catch (UnauthorizedAccessException)
        {
            statusMessage = "‚ùå Sess√£o expirada. Fa√ßa login novamente.";
            isError = true;
            await Task.Delay(2000);
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao buscar oportunidades");
            statusMessage = $"‚ùå Erro na busca: {ex.Message}";
            isError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchOpportunities();
        }
    }

    private async Task ClearFilters()
    {
        searchQuery = "";
        searchLocation = "";
        searchSalary = "";
        await LoadAllOpportunities();
    }

    private async Task Logout()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "token");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "user");
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro no logout");
            Navigation.NavigateTo("/login");
        }
    }
}
